import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# Sample data: user-item ratings
ratings = pd.DataFrame({
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3],
    'item_id': [1, 2, 3, 1, 3, 2, 3, 4],
    'rating': [5, 3, 4, 4, 5, 2, 5, 3]
})

# Pivot the ratings data to create a user-item matrix
user_item_matrix = ratings.pivot(index='user_id', columns='item_id', values='rating').fillna(0)

# Calculate cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

# Function to get item recommendations for a user
def get_recommendations(user_id, user_similarity_df, user_item_matrix, num_recommendations=3):
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]
    similar_users_indices = similar_users.index.tolist()
    similar_users_ratings = user_item_matrix.loc[similar_users_indices]
    weighted_ratings = similar_users.values.dot(similar_users_ratings) / similar_users.values.sum()
    recommendations = pd.Series(weighted_ratings, index=user_item_matrix.columns)
    recommendations = recommendations[recommendations > 0].sort_values(ascending=False)
    return recommendations.head(num_recommendations)

# Example usage
user_id = 1
recommendations = get_recommendations(user_id, user_similarity_df, user_item_matrix)
print(f'Recommendations for User {user_id}:
{recommendations}')
